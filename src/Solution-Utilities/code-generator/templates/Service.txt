using Domain.Entities;
using Domain.Interfaces.Repositories;
using Domain.Interfaces.Services;
using Domain.Validations;
using FluentValidation.Results;

namespace Domain.Services;

public class %##%Service : Service<%##%>, I%##%Service
{
     public %##%Service(IRepository<%##%> repository) 
        : base(repository)
    {
    }

    public override async Task<ValidationResult> AddAsync(%##% entity)
    {
        var validator = new %##%Validator();
        var results = validator.Validate(entity);

        if(!results.IsValid)
            return results;

        await base.AddAsync(entity);

        return results;
    }

    public override async Task<ValidationResult> UpdateAsync(%##% entity)
    {
        var validator = new %##%Validator();
        var results = validator.Validate(entity);

        if(!results.IsValid)
            return results;

        await base.UpdateAsync(entity);

        return results;
    }

    public override async Task<ValidationResult> RemoveAsync(%##% entity)
    {
        var validator = new %##%Validator();
        var results = validator.Validate(entity);

        if(!results.IsValid)
            return results;

        await base.RemoveAsync(entity);

        return results;
    }
}