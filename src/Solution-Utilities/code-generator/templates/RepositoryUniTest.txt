using Infrastructure.Data.Contexts;
using Infrastructure.Data.Repositories;
using Microsoft.EntityFrameworkCore;

namespace UnitTests.Infrastructure.Repositories;

public class %##%RepositoryTest
{
    private readonly Mock<SqlContext> _contextMock;
    private readonly Mock<DbSet<%##%>> _dbSetMock;
    private readonly %##%Repository _repository;

    public %##%RepositoryTest()
    {
        _contextMock = new Mock<SqlContext>();
        _dbSetMock = new Mock<DbSet<%##%>>();
        
        _contextMock.Setup(c => c.Set<%##%>()).Returns(_dbSetMock.Object);

        _repository = new %##%Repository(_contextMock.Object);
    }
    
    [Fact]
    public async Task InsertAsync_ShouldInsert%##%_WhenValid%##%IsPassed()
    {
        // Act
        var %#lower#% = new %##%("name");
        await _repository.InsertAsync(%#lower#%);
        
        // Assert
        _dbSetMock.Verify(d => d.Add(%#lower#%), Times.Once());
        _contextMock.Verify(c => c.SaveChangesAsync(new CancellationToken()), Times.Once());
    }
    
    [Fact]
    public async Task InsertAsync_ShouldThrowArgumentNullException_When%##%IsNull()
        => await Assert.ThrowsAsync<ArgumentNullException>(() => _repository.InsertAsync(null));

    [Fact]
    public async Task UpdateAsync_ShouldUpdate%##%_WhenValid%##%IsPassed()
    {
        // Act
        var %#lower#% = new %##%("name");
        await _repository.UpdateAsync(%#lower#%);
        
        // Assert
        _dbSetMock.Verify(d => d.Update(%#lower#%), Times.Once());
        _contextMock.Verify(c => c.SaveChangesAsync(new CancellationToken()), Times.Once());
    }

    [Fact]
    public async Task UpdateAsync_ShouldThrowArgumentNullException_When%##%IsNull()
        => await Assert.ThrowsAsync<ArgumentNullException>(() => _repository.UpdateAsync(null));

    [Fact]
    public async Task DeleteAsync_ShouldDelete%##%_WhenValid%##%IsPassed()
    {
        // Act
        var %#lower#% = new %##%("name");
        await _repository.DeleteAsync(%#lower#%);
        
        // Assert
        _dbSetMock.Verify(d => d.Remove(%#lower#%), Times.Once());
        _contextMock.Verify(c => c.SaveChangesAsync(new CancellationToken()), Times.Once());
    }
    
    [Fact]
    public async Task DeleteAsync_ShouldThrowArgumentNullException_When%##%IsNull()
        => await Assert.ThrowsAsync<ArgumentNullException>(() => _repository.DeleteAsync(null));
}