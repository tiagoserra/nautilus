using Domain.DTOs;
using Swashbuckle.AspNetCore.Annotations;
using Domain.Interfaces.Services;
using WebApi.Models;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers;

[Route("api/%#ROUTE#%/{action}")]
public class %##%Controller : ApiController
{
    private readonly I%##%Service _service;

    public %##%Controller(ILogger<ApiController> logger, I%##%Service service)
        :base(logger)
    {
        _service = service;
    }

    [HttpGet]
    [SwaggerResponse((int)System.Net.HttpStatusCode.OK, Type = typeof(PaginatedResultDto))]
    public async Task<ActionResult<PaginatedResultDto>> Get([FromQuery] int pagesize = 25, [FromQuery] int pageIndex = 1)
        => await _service.GetByPaginatedAsync(pageNumber: pageIndex,pageSize: pagesize);

    [HttpGet("{id}")]
    [SwaggerResponse((int)System.Net.HttpStatusCode.OK, Type = typeof(%##%Model))]
    public async Task<ActionResult<%##%Model>> Get(long id)
    {
        if (id == 0)
            return BadRequest();

        var entity = await _service.GetByIdAsync(id);

        if(entity is null)
            return NotFound();

        return new Update%##%Model(entity);
    }

    [HttpPost]
    [SwaggerResponse((int)System.Net.HttpStatusCode.OK, Type = typeof(long))]
    public async Task<ActionResult> Post(%##%Model model)
    {
        if(dto is null)
            return BadRequest();

        var result = await _service.AddAsync(model.ToDomain());

        if(result is null)
            return Ok();
        
        return BadRequest(result.Errors);
    }

    [HttpPut("{id}")]
    [SwaggerResponse((int)System.Net.HttpStatusCode.NoContent)]
    public async Task<ActionResult> Put(long id, Update%##%Model model)
    {
        if (id == 0 || id != dto.Id)
            return BadRequest();

        var entity = await _service.GetByIdAsync(id);

        if(entity is null)
            return NotFound();

        entity.Name = model.Name;

        var result = await _service.UpdateAsync(entity);

        if(result is null)
            return NoContent();
        
        return BadRequest(result.Errors);
    }

    [HttpDelete("{id}")]
    [SwaggerResponse((int)System.Net.HttpStatusCode.NoContent)]
    public async Task<ActionResult> Delete(long id)
    {
        if (id == 0)
            return BadRequest();

        var entity = await _service.GetByIdAsync(id);

        if(entity is null)
            return NotFound();

        var result = await _service.RemoveAsync(entity);
        
        if(result is null)
            return NoContent();
        
        return BadRequest(result.Errors);
    }
}